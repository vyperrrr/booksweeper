/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * OpenApi specification
 * OpenApi documentation
 *
 * The version of the OpenAPI document: 1.0
 * Contact: gpatrik101@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BookRequest } from '../models';
// @ts-ignore
import { BookResponse } from '../models';
// @ts-ignore
import { PageResponseBookResponse } from '../models';
// @ts-ignore
import { PageResponseBorrowedBookResponse } from '../models';
/**
 * BookApi - axios parameter creator
 * @export
 */
export const BookApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveReturnedBook: async (bookId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookId' is not null or undefined
            assertParamExists('approveReturnedBook', 'bookId', bookId)
            const localVarPath = `/books/return/approve/{bookId}`
                .replace(`{${"bookId"}}`, encodeURIComponent(String(bookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        borrowBook: async (bookId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookId' is not null or undefined
            assertParamExists('borrowBook', 'bookId', bookId)
            const localVarPath = `/books/borrow/{bookId}`
                .replace(`{${"bookId"}}`, encodeURIComponent(String(bookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllBooks: async (page?: number, size?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/books`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllBooksByOwner: async (page?: number, size?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/books`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllBorrowedBooks: async (page?: number, size?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/books/borrowed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllReturnedBooks: async (page?: number, size?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/books/returned`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findBookById: async (bookId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookId' is not null or undefined
            assertParamExists('findBookById', 'bookId', bookId)
            const localVarPath = `/books/{bookId}`
                .replace(`{${"bookId"}}`, encodeURIComponent(String(bookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        returnBook: async (bookId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookId' is not null or undefined
            assertParamExists('returnBook', 'bookId', bookId)
            const localVarPath = `/books/return/{bookId}`
                .replace(`{${"bookId"}}`, encodeURIComponent(String(bookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BookRequest} bookRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveBook: async (bookRequest: BookRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookRequest' is not null or undefined
            assertParamExists('saveBook', 'bookRequest', bookRequest)
            const localVarPath = `/books`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateArchivedAttribute: async (bookId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookId' is not null or undefined
            assertParamExists('updateArchivedAttribute', 'bookId', bookId)
            const localVarPath = `/books/archived/{bookId}`
                .replace(`{${"bookId"}}`, encodeURIComponent(String(bookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShareableAttribute: async (bookId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookId' is not null or undefined
            assertParamExists('updateShareableAttribute', 'bookId', bookId)
            const localVarPath = `/books/shareable/{bookId}`
                .replace(`{${"bookId"}}`, encodeURIComponent(String(bookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} bookId 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadBookCover: async (bookId: number, file: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookId' is not null or undefined
            assertParamExists('uploadBookCover', 'bookId', bookId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadBookCover', 'file', file)
            const localVarPath = `/books/cover/upload/{bookId}`
                .replace(`{${"bookId"}}`, encodeURIComponent(String(bookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BookApi - functional programming interface
 * @export
 */
export const BookApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BookApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approveReturnedBook(bookId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.approveReturnedBook(bookId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async borrowBook(bookId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.borrowBook(bookId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAllBooks(page?: number, size?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageResponseBookResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAllBooks(page, size, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAllBooksByOwner(page?: number, size?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageResponseBookResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAllBooksByOwner(page, size, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAllBorrowedBooks(page?: number, size?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageResponseBorrowedBookResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAllBorrowedBooks(page, size, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAllReturnedBooks(page?: number, size?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageResponseBorrowedBookResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAllReturnedBooks(page, size, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findBookById(bookId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findBookById(bookId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async returnBook(bookId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.returnBook(bookId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {BookRequest} bookRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveBook(bookRequest: BookRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveBook(bookRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateArchivedAttribute(bookId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateArchivedAttribute(bookId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateShareableAttribute(bookId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateShareableAttribute(bookId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} bookId 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadBookCover(bookId: number, file: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadBookCover(bookId, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BookApi - factory interface
 * @export
 */
export const BookApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BookApiFp(configuration)
    return {
        /**
         * 
         * @param {number} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveReturnedBook(bookId: number, options?: any): AxiosPromise<number> {
            return localVarFp.approveReturnedBook(bookId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        borrowBook(bookId: number, options?: any): AxiosPromise<number> {
            return localVarFp.borrowBook(bookId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllBooks(page?: number, size?: number, options?: any): AxiosPromise<PageResponseBookResponse> {
            return localVarFp.findAllBooks(page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllBooksByOwner(page?: number, size?: number, options?: any): AxiosPromise<PageResponseBookResponse> {
            return localVarFp.findAllBooksByOwner(page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllBorrowedBooks(page?: number, size?: number, options?: any): AxiosPromise<PageResponseBorrowedBookResponse> {
            return localVarFp.findAllBorrowedBooks(page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllReturnedBooks(page?: number, size?: number, options?: any): AxiosPromise<PageResponseBorrowedBookResponse> {
            return localVarFp.findAllReturnedBooks(page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findBookById(bookId: number, options?: any): AxiosPromise<BookResponse> {
            return localVarFp.findBookById(bookId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        returnBook(bookId: number, options?: any): AxiosPromise<number> {
            return localVarFp.returnBook(bookId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BookRequest} bookRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveBook(bookRequest: BookRequest, options?: any): AxiosPromise<number> {
            return localVarFp.saveBook(bookRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateArchivedAttribute(bookId: number, options?: any): AxiosPromise<number> {
            return localVarFp.updateArchivedAttribute(bookId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShareableAttribute(bookId: number, options?: any): AxiosPromise<number> {
            return localVarFp.updateShareableAttribute(bookId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} bookId 
         * @param {any} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadBookCover(bookId: number, file: any, options?: any): AxiosPromise<object> {
            return localVarFp.uploadBookCover(bookId, file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BookApi - interface
 * @export
 * @interface BookApi
 */
export interface BookApiInterface {
    /**
     * 
     * @param {number} bookId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApiInterface
     */
    approveReturnedBook(bookId: number, options?: AxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @param {number} bookId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApiInterface
     */
    borrowBook(bookId: number, options?: AxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApiInterface
     */
    findAllBooks(page?: number, size?: number, options?: AxiosRequestConfig): AxiosPromise<PageResponseBookResponse>;

    /**
     * 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApiInterface
     */
    findAllBooksByOwner(page?: number, size?: number, options?: AxiosRequestConfig): AxiosPromise<PageResponseBookResponse>;

    /**
     * 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApiInterface
     */
    findAllBorrowedBooks(page?: number, size?: number, options?: AxiosRequestConfig): AxiosPromise<PageResponseBorrowedBookResponse>;

    /**
     * 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApiInterface
     */
    findAllReturnedBooks(page?: number, size?: number, options?: AxiosRequestConfig): AxiosPromise<PageResponseBorrowedBookResponse>;

    /**
     * 
     * @param {number} bookId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApiInterface
     */
    findBookById(bookId: number, options?: AxiosRequestConfig): AxiosPromise<BookResponse>;

    /**
     * 
     * @param {number} bookId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApiInterface
     */
    returnBook(bookId: number, options?: AxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @param {BookRequest} bookRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApiInterface
     */
    saveBook(bookRequest: BookRequest, options?: AxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @param {number} bookId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApiInterface
     */
    updateArchivedAttribute(bookId: number, options?: AxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @param {number} bookId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApiInterface
     */
    updateShareableAttribute(bookId: number, options?: AxiosRequestConfig): AxiosPromise<number>;

    /**
     * 
     * @param {number} bookId 
     * @param {any} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApiInterface
     */
    uploadBookCover(bookId: number, file: any, options?: AxiosRequestConfig): AxiosPromise<object>;

}

/**
 * Request parameters for approveReturnedBook operation in BookApi.
 * @export
 * @interface BookApiApproveReturnedBookRequest
 */
export interface BookApiApproveReturnedBookRequest {
    /**
     * 
     * @type {number}
     * @memberof BookApiApproveReturnedBook
     */
    readonly bookId: number
}

/**
 * Request parameters for borrowBook operation in BookApi.
 * @export
 * @interface BookApiBorrowBookRequest
 */
export interface BookApiBorrowBookRequest {
    /**
     * 
     * @type {number}
     * @memberof BookApiBorrowBook
     */
    readonly bookId: number
}

/**
 * Request parameters for findAllBooks operation in BookApi.
 * @export
 * @interface BookApiFindAllBooksRequest
 */
export interface BookApiFindAllBooksRequest {
    /**
     * 
     * @type {number}
     * @memberof BookApiFindAllBooks
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof BookApiFindAllBooks
     */
    readonly size?: number
}

/**
 * Request parameters for findAllBooksByOwner operation in BookApi.
 * @export
 * @interface BookApiFindAllBooksByOwnerRequest
 */
export interface BookApiFindAllBooksByOwnerRequest {
    /**
     * 
     * @type {number}
     * @memberof BookApiFindAllBooksByOwner
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof BookApiFindAllBooksByOwner
     */
    readonly size?: number
}

/**
 * Request parameters for findAllBorrowedBooks operation in BookApi.
 * @export
 * @interface BookApiFindAllBorrowedBooksRequest
 */
export interface BookApiFindAllBorrowedBooksRequest {
    /**
     * 
     * @type {number}
     * @memberof BookApiFindAllBorrowedBooks
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof BookApiFindAllBorrowedBooks
     */
    readonly size?: number
}

/**
 * Request parameters for findAllReturnedBooks operation in BookApi.
 * @export
 * @interface BookApiFindAllReturnedBooksRequest
 */
export interface BookApiFindAllReturnedBooksRequest {
    /**
     * 
     * @type {number}
     * @memberof BookApiFindAllReturnedBooks
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof BookApiFindAllReturnedBooks
     */
    readonly size?: number
}

/**
 * Request parameters for findBookById operation in BookApi.
 * @export
 * @interface BookApiFindBookByIdRequest
 */
export interface BookApiFindBookByIdRequest {
    /**
     * 
     * @type {number}
     * @memberof BookApiFindBookById
     */
    readonly bookId: number
}

/**
 * Request parameters for returnBook operation in BookApi.
 * @export
 * @interface BookApiReturnBookRequest
 */
export interface BookApiReturnBookRequest {
    /**
     * 
     * @type {number}
     * @memberof BookApiReturnBook
     */
    readonly bookId: number
}

/**
 * Request parameters for saveBook operation in BookApi.
 * @export
 * @interface BookApiSaveBookRequest
 */
export interface BookApiSaveBookRequest {
    /**
     * 
     * @type {BookRequest}
     * @memberof BookApiSaveBook
     */
    readonly bookRequest: BookRequest
}

/**
 * Request parameters for updateArchivedAttribute operation in BookApi.
 * @export
 * @interface BookApiUpdateArchivedAttributeRequest
 */
export interface BookApiUpdateArchivedAttributeRequest {
    /**
     * 
     * @type {number}
     * @memberof BookApiUpdateArchivedAttribute
     */
    readonly bookId: number
}

/**
 * Request parameters for updateShareableAttribute operation in BookApi.
 * @export
 * @interface BookApiUpdateShareableAttributeRequest
 */
export interface BookApiUpdateShareableAttributeRequest {
    /**
     * 
     * @type {number}
     * @memberof BookApiUpdateShareableAttribute
     */
    readonly bookId: number
}

/**
 * Request parameters for uploadBookCover operation in BookApi.
 * @export
 * @interface BookApiUploadBookCoverRequest
 */
export interface BookApiUploadBookCoverRequest {
    /**
     * 
     * @type {number}
     * @memberof BookApiUploadBookCover
     */
    readonly bookId: number

    /**
     * 
     * @type {any}
     * @memberof BookApiUploadBookCover
     */
    readonly file: any
}

/**
 * BookApi - object-oriented interface
 * @export
 * @class BookApi
 * @extends {BaseAPI}
 */
export class BookApi extends BaseAPI implements BookApiInterface {
    /**
     * 
     * @param {BookApiApproveReturnedBookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApi
     */
    public approveReturnedBook(requestParameters: BookApiApproveReturnedBookRequest, options?: AxiosRequestConfig) {
        return BookApiFp(this.configuration).approveReturnedBook(requestParameters.bookId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BookApiBorrowBookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApi
     */
    public borrowBook(requestParameters: BookApiBorrowBookRequest, options?: AxiosRequestConfig) {
        return BookApiFp(this.configuration).borrowBook(requestParameters.bookId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BookApiFindAllBooksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApi
     */
    public findAllBooks(requestParameters: BookApiFindAllBooksRequest = {}, options?: AxiosRequestConfig) {
        return BookApiFp(this.configuration).findAllBooks(requestParameters.page, requestParameters.size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BookApiFindAllBooksByOwnerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApi
     */
    public findAllBooksByOwner(requestParameters: BookApiFindAllBooksByOwnerRequest = {}, options?: AxiosRequestConfig) {
        return BookApiFp(this.configuration).findAllBooksByOwner(requestParameters.page, requestParameters.size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BookApiFindAllBorrowedBooksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApi
     */
    public findAllBorrowedBooks(requestParameters: BookApiFindAllBorrowedBooksRequest = {}, options?: AxiosRequestConfig) {
        return BookApiFp(this.configuration).findAllBorrowedBooks(requestParameters.page, requestParameters.size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BookApiFindAllReturnedBooksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApi
     */
    public findAllReturnedBooks(requestParameters: BookApiFindAllReturnedBooksRequest = {}, options?: AxiosRequestConfig) {
        return BookApiFp(this.configuration).findAllReturnedBooks(requestParameters.page, requestParameters.size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BookApiFindBookByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApi
     */
    public findBookById(requestParameters: BookApiFindBookByIdRequest, options?: AxiosRequestConfig) {
        return BookApiFp(this.configuration).findBookById(requestParameters.bookId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BookApiReturnBookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApi
     */
    public returnBook(requestParameters: BookApiReturnBookRequest, options?: AxiosRequestConfig) {
        return BookApiFp(this.configuration).returnBook(requestParameters.bookId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BookApiSaveBookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApi
     */
    public saveBook(requestParameters: BookApiSaveBookRequest, options?: AxiosRequestConfig) {
        return BookApiFp(this.configuration).saveBook(requestParameters.bookRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BookApiUpdateArchivedAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApi
     */
    public updateArchivedAttribute(requestParameters: BookApiUpdateArchivedAttributeRequest, options?: AxiosRequestConfig) {
        return BookApiFp(this.configuration).updateArchivedAttribute(requestParameters.bookId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BookApiUpdateShareableAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApi
     */
    public updateShareableAttribute(requestParameters: BookApiUpdateShareableAttributeRequest, options?: AxiosRequestConfig) {
        return BookApiFp(this.configuration).updateShareableAttribute(requestParameters.bookId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BookApiUploadBookCoverRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApi
     */
    public uploadBookCover(requestParameters: BookApiUploadBookCoverRequest, options?: AxiosRequestConfig) {
        return BookApiFp(this.configuration).uploadBookCover(requestParameters.bookId, requestParameters.file, options).then((request) => request(this.axios, this.basePath));
    }
}
